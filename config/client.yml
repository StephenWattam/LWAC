---
:server:                                # Options affecting which server to use
  :address: "127.0.0.1"                   # IP or hostname
  :port: 27400                            # Port
  :service_name: :downloader              # Marilyn service name.  Leave as :downloader for now.
:network:                               # Network behaviour when talking to the server
  :connect_timeout: 20                    # How long we give the socket to respond
  :minimum_reconnect_time: 10             # The minimum time we take before trying again
  :maximum_reconnect_time: 240            # The maximum time we take before trying again
  :connect_failure_penalty: 10            # The amount we wait extra each time it fails.
:client:                                # Properties of the client
  :uuid_salt: "LOCAL"                     # What to call ones'self in logs.  Will be prefixed to a hash computed from the hostname.
  :batch_capacity: 1000                   # How many links to download at once?  Careful not to run out of RAM or take too long.
  :check_in_rate: 100                     # How large chunks should be when checking in.  Smaller is less efficient, but also less likely to fail if some particularly large files are downloaded.  
:worker_pool:                           # Options affecting the web request process
  :simultaneous_workers: 50                 # Simultaneous workers.  Kernel limits usually hit at about 120-130 on linux
  :body_not_text_placeholder: "<not text>"  # What to say if we get binary responses from the server.  Should be detectable in post-processing.
    # ----
  :fix_encoding: true                       # Attempt to fix the encoding of output?
  :target_encoding: UTF-8                   # Target encoding
  :encoding_options:                        # options supported see http://ruby-doc.org/core-1.9.3/String.html#method-i-encode
    :invalid: :replace                        # If value is :replace , replaces invalid chars with the :replace char.
    :undef: :replace                          # if value if :replace , replaces undefined chars with the :replace char 
    #:replace: '?'                            # the char to use in replacement, defaults to uFFFD for unicode and '?' for other targets
    #:fallback:                               # some object supporting [], to look up [invalid char in source encoding] = valid char in destination encoding  
      #'from': 'to'
      #'from2': 'to2'
    #:xml: :attr                              # either :text or :attr.  If :text, replaces things with hex entities, if :attr, it also quotes the entities "&quot;"
    #:cr_newline: true                        # Replaces LF(\n) with CR(\r) if true
    #:crlf_newline:                           # Replaces LF(\n) with CRLF(\r\n) if true
    :universal_newline: true                  # Replaces CRLF(\r\n) and CR(\r) with LF(\n) if true
    # ----
  :curl_workers:                          # Options affecting individual web request clients themselves
    :max_redirects: 5                       # How many redirects to follow.  5 seems standard in browsers
    :useragent: ! '"Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.2.11) Gecko/20101012 Firefox/3.6.11"'  # How to ID ones'self to the server
    :follow_location: true                  # Should it follow location headers?
    :timeout: 60                            # Overall timeout per request.  Set to a user's attention span.
    :connect_timeout: 10                    # TCP connect timeout.
    :dns_cache_timeout: 10                  # DNS lookup timeout.
    :ftp_response_timeout: 10               # FTP response timeout.
:logging:                                 # Log output options
  :progname: Client                         # Name used in logs
  :logs:                                    # List of log outputs
    :default:                                 # Log is called "default"
      :dev: STDOUT                              # Filename to log to, or "STDOUT", or "STDERR"
      :level: :info                             # Level to report at.  One of :debug, :warn, :info, :error, or :fatal
    #:errors:
      #:dev: 'logs/client.err'
      #:level: :warn                                              
    :file_log:
      :dev: 'logs/client.log'
      :level: :info
